package xratedjunior.betterdefaultbiomes.configuration.extra;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import net.minecraft.resources.ResourceKey;
import net.minecraft.world.level.biome.Biome;
import net.minecraftforge.common.BiomeDictionary;
import net.minecraftforge.common.BiomeDictionary.Type;
import xratedjunior.betterdefaultbiomes.BetterDefaultBiomes;
import xratedjunior.betterdefaultbiomes.configuration.DebugConfig;

/**
 * @author  Xrated_junior
 * @version 1.18.2-Alpha 3.0.0
 */
@SuppressWarnings("deprecation")
public class BiomeTypeInfo {
	private static final String BDB_CONFIG_FOLDER = BetterDefaultBiomes.BDBFolderPath.toString();
	private static final File EXTRA_INFO_FOLDER = new File(BDB_CONFIG_FOLDER, "Extra Info");
	private static final File EXTRA_INFO_TEXT_FILE = new File(EXTRA_INFO_FOLDER.getPath(), "Biome Category Info.txt");

	/**
	 * Create folder and text file
	 */
	public static void makeInfoTextFiles() {
		// Check if extra info files is turned on in the config.
		if (DebugConfig.extra_info_files.get()) {
			// Check if folder already exists.
			if (!EXTRA_INFO_FOLDER.exists()) {
				// Create folder if it doesn't exist.
				EXTRA_INFO_FOLDER.mkdirs();
			}

			BetterDefaultBiomes.LOGGER.debug("Creating Extra Info Files.");
			// Create text file
			textFileGenerator();
		}
	}

	/**
	 * Generate BiomeType text file
	 */
	private static void textFileGenerator() {
		ArrayList<String> masterList = new ArrayList<String>();
		masterList.add("This is a text file generated by Better Default Biomes.");
		masterList.add("The generation of this file can be turned off in the mod config.");
		masterList.add("");

		List<BiomeTypeList> allBiomeTypeLists = new ArrayList<BiomeTypeList>();

		// Initialize all BiomeTypes
		Collection<Type> allBiomeTypes = BiomeDictionary.Type.getAll();
		for (Type biomeType : allBiomeTypes) {
			// Get type name
			String typeName = biomeType.getName();
			// Create list for type
			BiomeTypeList biomeTypeList = new BiomeTypeList(typeName);
			// Get Biomes belonging to BiomeType
			Set<ResourceKey<Biome>> biomes = BiomeDictionary.getBiomes(biomeType);

			// No Biomes belonging to BiomeType
			if (biomes.isEmpty()) {
				// Add introduction for new type
				biomeTypeList.createSubheader(newEmptyBiomeInfo(typeName));
			}

			// Add all Biomes belonging to BiomeType
			else {
				// Add introduction for new type
				biomeTypeList.createSubheader(newBiomeInfo(typeName));

				// Add all Biomes to the info list
				biomes.forEach((biome) -> {
					biomeTypeList.addBiome(biome.location().toString());
				});
			}

			// Add list to file
			allBiomeTypeLists.add(biomeTypeList);
		}

		// Sort Lists by BiomeType name
		Collections.sort(allBiomeTypeLists);

		// Sort Biomes in lists
		for (BiomeTypeList biomeTypeList : allBiomeTypeLists) {
			// Add introduction line
			masterList.add(biomeTypeList.getSubheader());

			//Sort Biomes alphabetically
			Collections.sort(biomeTypeList.getBiomeList());
			// Add Biomes to final list
			masterList.addAll(biomeTypeList.getBiomeList());

			// Spacing between types
			masterList.add("");
		}

		List<String> finalText = masterList;

		try {
			Files.write(Paths.get(EXTRA_INFO_TEXT_FILE.getPath()), finalText, StandardCharsets.UTF_8);
			BetterDefaultBiomes.LOGGER.debug("Finished creating Extra Info Files.");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * First line of text for every BiomeType
	 */
	private static String newBiomeInfo(String typeName) {
		return ("These Biomes are part of the \"" + typeName + "\" BiomeType:");
	}

	/**
	 * Line of text for every BiomeType not containing any Biomes
	 */
	private static String newEmptyBiomeInfo(String typeName) {
		return ("The \"" + typeName + "\" BiomeType does not contain any Biomes.");
	}

	private static class BiomeTypeList implements Comparable<BiomeTypeList> {
		private String name;
		private String subheader;
		private ArrayList<String> biomeList = new ArrayList<String>();

		private BiomeTypeList(String name) {
			this.name = name;
		}

		private String getName() {
			return this.name;
		}

		private String getSubheader() {
			return this.subheader;
		}

		private ArrayList<String> getBiomeList() {
			return this.biomeList;
		}

		private void createSubheader(String subheader) {
			this.subheader = subheader;
		}

		private void addBiome(String biome) {
			this.biomeList.add(biome);
		}

		/**
		 * Used for sorting in lists
		 */
		@Override
		public int compareTo(BiomeTypeList otherList) {
			return this.getName().compareTo(otherList.getName());
		}
	}
}
